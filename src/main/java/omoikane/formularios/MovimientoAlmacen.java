/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MovimientoAlmacen.java
 *
 * Created on 3/09/2008, 11:09:08 AM
 */

package omoikane.formularios;

import javax.swing.*;
import java.awt.*;
import java.awt.image.*;
import java.awt.event.*;
import javax.swing.table.*;
import javax.swing.event.*;
import java.util.*;
import java.text.*;
import omoikane.principal.*;
import omoikane.sistema.*;
import net.sf.jasperreports.engine.*;
import net.sf.jasperreports.view.*;

/**
 *
 * @author Octavio
 */
public class MovimientoAlmacen extends JInternalFrame {

    BufferedImage fondo;
    Celda cellCodigo = new Celda();
    /** Creates new form MovimientoAlmacen */
    public MovimientoAlmacen() {
        initComponents();
        //Instrucciones para el funcionamiento del fondo semistransparente
        this.setOpaque(false);
        ((JPanel)this.getContentPane()).setOpaque(false);
        this.getLayeredPane().setOpaque(false);
        this.getRootPane().setOpaque(false);
        this.generarFondo(this);

        Herramientas.centrarVentana(this);

        this.tablaPrincipal.addKeyListener(new TabListener());
        tablaPrincipal.getModel().addTableModelListener(modelListener);
        tablaPrincipal.getColumn("Código artículo").setCellEditor(cellCodigo);

        this.fecha.setDate(new Date());
        //tablaPrincipal.setDefaultEditor(Object.class, new Celda());
        
    }



    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new JLabel();
        lblTitulo = new JLabel();
        jLabel1 = new JLabel();
        descripcion = new JTextField();
        jLabel4 = new JLabel();
        folio = new JTextField();
        jScrollPane1 = new JScrollPane();
        tablaPrincipal = new JTable();
        btnNuevo = new JButton();
        btnImprimir = new JButton();
        jPanel1 = new JPanel();
        btnCerrar = new JButton();
        jLabel5 = new JLabel();
        jLabel6 = new JLabel();
        jLabel7 = new JLabel();
        almacen = new JTextField();
        tipoMovimiento = new JComboBox();
        txtSumaTotal = new JTextField();
        jLabel8 = new JLabel();
        btnEliminarRenglon = new JButton();
        fecha = new org.jdesktop.swingx.JXDatePicker();
        jLabel3 = new JLabel();

        jLabel2.setText("jLabel2");

        setTitle("Movimiento de almacén");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblTitulo.setFont(new Font("Arial", 1, 36)); // NOI18N
        lblTitulo.setForeground(new Color(255, 255, 255));
        lblTitulo.setText("<html><head><style type='text/css'>body { font-family: 'Roboto Thin'; font-size: 28px; }</style></head>\n<body>\nMovimiento de almacén\n</body></html>");
        getContentPane().add(lblTitulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, 40));

        jLabel1.setFont(new Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setForeground(new Color(255, 255, 255));
        jLabel1.setText("Descripción:");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, -1, 30));
        getContentPane().add(descripcion, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 90, 600, -1));

        jLabel4.setFont(new Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setForeground(new Color(255, 255, 255));
        jLabel4.setText("Folio:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 90, -1, 30));
        getContentPane().add(folio, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 90, 80, -1));

        tablaPrincipal.setFont(new Font("Tahoma", 0, 12)); // NOI18N
        tablaPrincipal.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código artículo", "Descripción", "Costo", "Cantidad", "Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, true, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaPrincipal.setToolTipText("[ F1 ] catalogo de articulos");
        tablaPrincipal.setCellSelectionEnabled(true);
        tablaPrincipal.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        tablaPrincipal.setGridColor(new Color(51, 255, 255));
        tablaPrincipal.setRowHeight(25);
        tablaPrincipal.setShowHorizontalLines(false);
        tablaPrincipal.setSurrendersFocusOnKeystroke(true);
        jScrollPane1.setViewportView(tablaPrincipal);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, 820, 280));

        btnNuevo.setIcon(new ImageIcon(getClass().getResource("/64x64/page_add.png"))); // NOI18N
        btnNuevo.setText("<html><center>Agregar éste movimiento [F5]</center></html>");
        btnNuevo.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });
        getContentPane().add(btnNuevo, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 440, 190, 60));

        btnImprimir.setIcon(new ImageIcon(getClass().getResource("/64x64/printer.png"))); // NOI18N
        btnImprimir.setText("<html><center>Imprimir [F8]</center></html>");
        btnImprimir.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnImprimirActionPerformed(evt);
            }
        });
        getContentPane().add(btnImprimir, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 440, 160, 60));

        GroupLayout jPanel1Layout = new GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 30, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 30, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 480, 30, 30));

        btnCerrar.setIcon(new ImageIcon(getClass().getResource("/64x64/back.png"))); // NOI18N
        btnCerrar.setText("<HTML>Regresar a almacén [Esc]</HTML>");
        btnCerrar.setRequestFocusEnabled(false);
        btnCerrar.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnCerrarActionPerformed(evt);
            }
        });
        getContentPane().add(btnCerrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 10, 230, 40));

        jLabel5.setFont(new Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setForeground(new Color(255, 255, 255));
        jLabel5.setText("Tipo de movimiento:");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 130, 30));

        jLabel6.setFont(new Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setForeground(new Color(255, 255, 255));
        jLabel6.setText("Fecha:");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 60, 40, 30));

        jLabel7.setFont(new Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setForeground(new Color(255, 255, 255));
        jLabel7.setText("Almacén [F1]:");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 50, 90, 30));

        almacen.setEditable(false);
        getContentPane().add(almacen, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 60, 190, -1));

        tipoMovimiento.setModel(new DefaultComboBoxModel(new String[] { "Entrada al almacén", "Salida del almacén", "Ajuste" }));
        getContentPane().add(tipoMovimiento, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 60, 140, -1));
        getContentPane().add(txtSumaTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 410, 170, -1));

        jLabel8.setFont(new Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setForeground(new Color(255, 255, 255));
        jLabel8.setText("Total:");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 410, -1, 20));

        btnEliminarRenglon.setIcon(new ImageIcon(getClass().getResource("/16x16/remove.png"))); // NOI18N
        btnEliminarRenglon.setText("Eliminar renglón seleccionado [F12]");
        btnEliminarRenglon.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnEliminarRenglonActionPerformed(evt);
            }
        });
        getContentPane().add(btnEliminarRenglon, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 410, -1, -1));

        fecha.setFormats(DateFormat.getDateInstance(DateFormat.MEDIUM));
        getContentPane().add(fecha, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 60, 160, -1));

        jLabel3.setFont(new Font("Tahoma", 3, 12)); // NOI18N
        jLabel3.setText("[ F1 ] catalogo de articulos");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 410, 190, 20));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public DateFormat       formatoFecha = DateFormat.getDateInstance(DateFormat.MEDIUM);
    public SimpleDateFormat sdf          = new SimpleDateFormat("yyyy-MM-dd");
    public String  getTipoMovimiento()    { return (String)this.tipoMovimiento.getSelectedItem(); }
    public String getAlmacen()            { return (String)(this.almacen.getText()); }
    public String  getFecha()             { return (String)sdf.format(this.fecha.getDate()); }
    public String  getDescripcion()       { return (String)this.descripcion.getText(); }
    public String  getFolio()             { return (String)this.folio.getText(); }
    public Double  getGranTotal()         { return Double.parseDouble(this.txtSumaTotal.getText()); }
    public Vector  getTablaPrincipal()    { return ((DefaultTableModel)this.tablaPrincipal.getModel()).getDataVector();}
    public JTextField getFieldAlmacen()   { return this.almacen; }
    public void setTipoMovimiento(String val) { tipoMovimiento.setSelectedItem(val); }
    public void setAlmacen       (String val) { almacen.setText(val); }
    public void setFecha         (String val) { try { fecha.setDate(sdf.parse(val)); } catch(Exception e) { Dialogos.lanzarDialogoError(null, "Error en el registro: Fecha inválida", Herramientas.getStackTraceString(e)); } }
    public void setDescripcion   (String val) { descripcion.setText(val); }
    public void setFolio         (String val) { folio.setText(val);}
    public void setTablaPrincipal(java.util.List val) {
        DefaultTableModel modelo = ((DefaultTableModel)this.tablaPrincipal.getModel());
        for(int i = 0; i < val.size(); i++)
        {modelo.addRow(((ArrayList) val.get(i)).toArray());}
        this.calculaSumas();
    }

int ID = -1;
public void setID(int ID) { this.ID = ID; }
public int  getID() { return ID; }

public void setModoModificaciones()
{
    this.setTitle("Modificar movimiento " + ID);
    //this.btnEliminar.setVisible(false);
    this.btnNuevo.setVisible(false);
    this.lblTitulo.setText("Modificar Movimiento de Almacén");
    this.btnEliminarRenglon.setVisible(true);
    //this.btnModificar.setVisible(true);
    this.folio.setEditable(true);
    this.descripcion.setEditable(true);
    this.fecha.setEditable(true);
    this.tipoMovimiento.setEditable(true);
    this.almacen.setEditable(true);
    this.tablaPrincipal.setEnabled(true);
}
public void setModoNuevo()
{
    this.setTitle("Registrar nuevo movimiento de almacén");
    this.lblTitulo.setText("Nuevo movimiento de almacén");
    this.folio.setText("0");
    //this.btnEliminar.setVisible(false);
    //this.btnModificar.setVisible(false);
    ((DefaultTableModel)this.tablaPrincipal.getModel()).addRow(new Object[] {});
}
public void setModoDetalles()
{
    this.setTitle("Detalles del movimiento de almacén " + ID);
    this.lblTitulo.setText("Detalles del movimiento");
    this.btnEliminarRenglon.setVisible(false);
    //this.btnCatalogo.setVisible(false);
    this.btnNuevo.setVisible(false);
    //this.btnModificar.setVisible(false);
    this.folio.setEditable(false);
    this.descripcion.setEditable(false);
    this.fecha.setEditable(false);
    this.tipoMovimiento.setEditable(false);
    this.almacen.setEditable(false);
    this.tablaPrincipal.setEnabled(false);
}

    private void btnCerrarActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnCerrarActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnCerrarActionPerformed

    private void btnEliminarRenglonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnEliminarRenglonActionPerformed
        // TODO add your handling code here:
        int IDRenglon = this.tablaPrincipal.getSelectedRow();
        if(IDRenglon != -1) {
            if(JOptionPane.showConfirmDialog(null, "¿Realmente desea eliminar el renglón seleccionado?", "¿Eliminar?", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {
                ((DefaultTableModel)tablaPrincipal.getModel()).removeRow(IDRenglon);
            }
        }
    }//GEN-LAST:event_btnEliminarRenglonActionPerformed

    private void btnNuevoActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        // TODO add your handling code here:
        Almacenes.guardarMovimiento(this);
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void btnImprimirActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnImprimirActionPerformed
        // TODO add your handling code here:
        Almacenes.lanzarImprimirMovimiento(this);
    }//GEN-LAST:event_btnImprimirActionPerformed

    public void paintComponent(Graphics g)
    {
      Graphics2D g2d = (Graphics2D) g;
      g2d.drawImage(fondo, 0, 0, null);

    }
    public void generarFondo(Component componente)
    {
      Rectangle areaDibujo = this.getBounds();
      BufferedImage tmp;
      GraphicsConfiguration gc = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDefaultConfiguration();

      tmp = gc.createCompatibleImage(areaDibujo.width, areaDibujo.height,BufferedImage.TRANSLUCENT);
      Graphics2D g2d = (Graphics2D) tmp.getGraphics();
      g2d.setColor(new Color(0,0,0,165));
      g2d.fillRect(0,0,areaDibujo.width,areaDibujo.height);
      fondo = tmp;

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JTextField almacen;
    private JButton btnCerrar;
    private JButton btnEliminarRenglon;
    private JButton btnImprimir;
    private JButton btnNuevo;
    public JTextField descripcion;
    private org.jdesktop.swingx.JXDatePicker fecha;
    private JTextField folio;
    private JLabel jLabel1;
    private JLabel jLabel2;
    private JLabel jLabel3;
    private JLabel jLabel4;
    private JLabel jLabel5;
    private JLabel jLabel6;
    private JLabel jLabel7;
    private JLabel jLabel8;
    private JPanel jPanel1;
    private JScrollPane jScrollPane1;
    private JLabel lblTitulo;
    private JTable tablaPrincipal;
    private JComboBox tipoMovimiento;
    private JTextField txtSumaTotal;
    // End of variables declaration//GEN-END:variables

    

    public void calculaSumas()
    {
        try{
        TableModel tm = this.tablaPrincipal.getModel();
        int tamTabla = tm.getRowCount();
        double costo, cantidad, totalFila, sumaTotal;
        sumaTotal = 0.0;

        for(int i = 0; i < tamTabla; i++)
        {
            if(tm.getValueAt(i, 2) != null && tm.getValueAt(i, 3) != null)
            {
                costo    = Double.valueOf(String.valueOf(tm.getValueAt(i, 2)));
                cantidad = Double.valueOf(String.valueOf(tm.getValueAt(i, 3)));
                totalFila= costo * cantidad;

                tm.setValueAt(totalFila, i, 4);
                sumaTotal += totalFila;
            }

        }

        txtSumaTotal.setText(String.valueOf(sumaTotal));
    }
        catch(Exception e){Dialogos.lanzarAlerta("Cantidades invalidas, puede que algun numero este mal escrito");}
    }
    
    //Clase encargada de recibir los eventos de la tabla, para crear nuevas filas y calcular sumas
    class TabListener extends KeyAdapter
    {
        public void keyPressed(KeyEvent ke)
        {

            if(ke.getKeyCode()==ke.VK_TAB)
            {
                int x         = ((JTable)ke.getSource()).getSelectedColumn();
                int y         = ((JTable)ke.getSource()).getSelectedRow();
                int maxX      = ((JTable)ke.getSource()).getColumnCount();
                int maxY      = ((JTable)ke.getSource()).getRowCount();
                TableModel tm = ((JTable)ke.getSource()).getModel();
                if(x==maxX-1 && y==maxY-1) { ((DefaultTableModel)tm).addRow(new Object[maxX]); }
            }
        }

    }
    public TableModelListener modelListener = new TableModelListener()
    {
        public void tableChanged(TableModelEvent tme)
        {
            DefaultTableModel tm     = (DefaultTableModel)tme.getSource();
            int col                  = tme.getColumn();
            int row                  = tme.getFirstRow();
            String            valCel = (String)tm.getValueAt(tme.getFirstRow(), 0);

            if(tme.getType() == 0 && (col == 2 || col == 3))
            {
                calculaSumas();
            }
        }
    };

    class Celda extends DefaultCellEditor
    {
        JTextField componente;
        Celda() { super(new JTextField()); componente = (JTextField) this.getComponent(); /*componente.addKeyListener(new CellCodigoKeyListener());*/}

        public boolean stopCellEditing() {
            Object descrip = null, costo = null;
            JTextField campo = ((JTextField)this.getComponent());
            String codigo = campo.getText();
            if(codigo == "") { return false; }
            descrip= Almacenes.groovyPort("omoikane.principal.Articulos.getArticulo('codigo = \""+codigo+"\"').descripcion");
            costo  = Almacenes.groovyPort("omoikane.principal.Articulos.getArticulo('select * from articulos,precios where articulos.codigo = \""+codigo+"\" " +
                    "and articulos.id_articulo = precios.id_articulo and precios.id_almacen = '+omoikane.principal.Principal.config.idAlmacen[0].text()).costo");

            if(descrip==null)
            {
                Dialogos.lanzarAlerta("El artículo que capturó no exíste");
                campo.setText("");
                return false;
            } else {
                tablaPrincipal.setValueAt(descrip, tablaPrincipal.getEditingRow(), tablaPrincipal.getEditingColumn()+1);
                tablaPrincipal.setValueAt(costo  , tablaPrincipal.getEditingRow(), tablaPrincipal.getEditingColumn()+2);
                return super.stopCellEditing();
                
            }
        }
    }
}

